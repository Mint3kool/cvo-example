# This is intended to be run on a existing cluster, hence the fairly short timeouts

- name: Wait for cluster operator api call to be successfull
  k8s_info:
    api_version: v1
    kind: ClusterOperator
  register: reg_ocp_co
  ignore_errors: true
  until:
    - reg_ocp_co.rc is not defined
  retries: 10 # wait for 10 min max, otherwise abort
  delay: 60

- name: Debug run to save ClusterOperator json for debuging
  k8s_info:
    api_version: v1
    kind: ClusterOperator
  register: reg_ocp_co
  ignore_errors: true
  when: debug_json | bool

- name: Saving json output to /tmp/cluster_operators.json
  copy:
    content: "{{ reg_ocp_co }}"
    dest: /tmp/cluster_operators.json
  when: debug_json | bool

###############################################################################
# I tend to use jmespath_terminal to look at the json output and filter my
# queries so that I have a working working query when I start using it in
# ansible playbooks. It is no fun debuging json queries by running the actual
# ansible playbook.
# Ref: https://github.com/jmespath/jmespath.terminal
#
# pip3 install --user jmespath-terminal
# jpterm /tmp/cluster_operators.json
###############################################################################

# This essentially runs the equivalent OpenShift cli command 'oc get co', and loops
# through all operators verifying that they are up
- name: Checking that all cluster operators are available
  k8s_info:
    api_version: v1
    kind: ClusterOperator
  register: reg_ocp_co
  vars:
    available_query: "resources[*].status.conditions[?type=='Available'].status"
    available: "{{ reg_ocp_co | json_query(available_query) | flatten | unique }}"
  when: not debug_json | bool
  until:
    - reg_ocp_co.resources is defined
    - available == ['True']
  retries: 10 # wait for 10 min max
  delay: 60

- name: Debug run to save ClusterVersion json for debuging
  k8s_info:
    api_version: v1
    kind: ClusterVersion
  register: reg_ocp_version
  ignore_errors: true
  when: debug_json | bool

- name: Saving json output to /tmp/cluster_version.json
  copy:
    content: "{{ reg_ocp_version }}"
    dest: /tmp/cluster_version.json
  when: debug_json | bool

# This essentially runs the equivalent Openshift CLI command 'oc get clusterversion' and
# extracts information from that
- name: Make sure Current Cluster is not in the process of upgrading
  k8s_info:
    api_version: v1
    kind: ClusterVersion
  register: reg_ocp_version
  vars:
    progressing_query: "resources[0].status.conditions[?type=='Progressing'].status"
    progressing: "{{ reg_ocp_version | json_query(progressing_query) | flatten | unique }}"
  when: not debug_json | bool
  until:
    - reg_ocp_version.resources is defined
    - progressing == ['False']
  retries: 10 # wait for 5 minutes max
  delay: 30
