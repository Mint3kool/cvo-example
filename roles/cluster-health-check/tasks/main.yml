# This script is intended to be run on a live and healthy cluster, which
# is why there are fairly short timeouts

- name: Wait for cluster operator api call to be successfull
  k8s_info:
    api_version: v1
    kind: ClusterOperator
  register: reg_ocp_co
  ignore_errors: true
  until:
    - reg_ocp_co.rc is not defined
  retries: 5 # wait for 5 min max, otherwise abort
  delay: 60

# Debug Scripts
#
# We still need the cluster api to be up prior to debugging
#
# I tend to use jmespath_terminal to look at the json output and filter my
# queries so that I have a working working query when I start using it in
# ansible playbooks. It is no fun debuging json queries by running the actual
# ansible playbook.
# Ref: https://github.com/jmespath/jmespath.terminal
#
# pip3 install --user jmespath-terminal
# jpterm /tmp/cluster_operators.json

- name: Debug run to save ClusterOperator json for debugging
  k8s_info:
    api_version: v1
    kind: ClusterOperator
  register: reg_ocp_co
  ignore_errors: true
  when: debug_json | bool

- name: Saving json output to /tmp/cluster_operators.json
  copy:
    content: "{{ reg_ocp_co }}"
    dest: /tmp/cluster_operators.json
  when: debug_json | bool

- name: Debug run to save ClusterVersion json for debugging
  k8s_info:
    api_version: v1
    kind: ClusterVersion
  register: reg_ocp_version
  ignore_errors: true
  when: debug_json | bool

- name: Saving json output to /tmp/cluster_version.json
  copy:
    content: "{{ reg_ocp_version }}"
    dest: /tmp/cluster_version.json
  when: debug_json | bool

- name: Debug run to save Node info json for debugging
  k8s_info:
    api_version: v1
    kind: Node
  register: reg_ocp_nodes
  ignore_errors: true
  when: debug_json | bool

- name: Saving json output to /tmp/nodes.json
  copy:
    content: "{{ reg_ocp_nodes }}"
    dest: /tmp/cluster_nodes.json
  when: debug_json | bool

# End Debug Scripts

- name: Wait for all cluster operators to be available
  k8s_info:
    api_version: v1
    kind: ClusterOperator
  register: reg_ocp_co
  vars:
    available_query: "resources[*].status.conditions[?type=='Available'].status"
    available: "{{ reg_ocp_co | json_query(available_query) | flatten | unique }}"
    progressing_query: "resources[*].status.conditions[?type=='Progressing'].status"
    progressing: "{{ reg_ocp_co | json_query(progressing_query) | flatten | unique }}"
    degraded_query: "resources[*].status.conditions[?type=='Degraded'].status"
    degraded: "{{ reg_ocp_co | json_query(degraded_query) | flatten | unique }}"
  when: not debug_json | bool
  until:
    - reg_ocp_co.resources is defined
    - reg_ocp_co.resources | length > 2
    - available == ['True']
    - progressing == ['False']
    - degraded == ['False']
  retries: 10 # wait for 10 minutes max
  delay: 60

# Why the condition - " reg_ocp_co.resources | length > 2 "
# When a cluster starts coming up during a bootstrap process and the api starts
# responding, there is an edge case that results in 2 cluster operators starting
# first and meeing our success criteria for a healthy cluster, when the cluster
# actually is not ready.
# The success criteria being that all operators are:
#   available=True, progressing=False, degraded=False

- name: Verify that all cluster nodes are up
  k8s_info:
    api_version: v1
    kind: Node
  register: reg_ocp_nodes
  vars:
    node_query: "resources[*].status.conditions[?type=='Ready'].status"
    node_readiness: "{{ reg_ocp_nodes | json_query(node_query) | flatten | unique}}"
  when: not debug_json | bool
  until:
    node_readiness == ['True']
  retries: 10
  delay: 60 # wait for 10 minutes max

###############################################################################
# What do the queries do ?
#
# Step1: Gather all the cluster operators. The json is stord in reg_ocp_co
#
# Step2: Gather the status of the "Available" column for all the operators
#        This is restured as a list within in a list
#        We flatten the list and filter it through unique
#        If All the operators have a status of True for the available column
#        you will end up with
#        available: ['True']
#        If even 1 operator has a status of False the resultant list will be
#        available: ['True', 'False']
#
# Step4: we do the same for "Progressing" and "Degraded" columns as well
#
# Step5: Loop through ignoring all error until all the cluster operators go
#        active. Final good state will be
#        available: ['True'] , progressing: ['False'] , degraded: ['False']
###############################################################################
